#!/usr/bin/env python
###############################################################################
#
# Copyright 2015 - 2016, Paul Beckingham, Federico Hernandez.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# https://www.opensource.org/licenses/mit-license.php
#
###############################################################################

import sys
import json
import os

# Hook should extract all of the following for use as Timewarrior tags:
#   UUID
#   Project
#   Tags
#   Description
#   UDAs

# Make no changes to the task, simply observe.
old = json.loads(sys.stdin.readline())
new = json.loads(sys.stdin.readline())
print(json.dumps(new))

# Extract attributes for use as tags.
tags = [new['description']]

if 'project' in new:
    project = new['project']
    tags.append(project)
    if '.' in project:
        tags.extend([tag for tag in project.split('.')])

if 'tags' in new:
    tags.extend(new['tags'])

combined = ' '.join(['"%s"' % tag for tag in tags]).encode('utf-8').strip()

# Started task.
if 'start' in new and not 'start' in old:
    os.system('timew start ' + combined.decode() + ' :yes')

# Stopped task.
elif not 'start' in new and 'start' in old:
    os.system('timew stop ' + combined.decode() + ' :yes')

# Any task that is active, with a non-pending status should not be tracked.
elif 'start' in new and new['status'] != 'pending':
    os.system('timew stop ' + combined.decode() + ' :yes')

